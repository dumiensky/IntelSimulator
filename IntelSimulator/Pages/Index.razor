@page "/"
@using IntelSimulator.Models

<div class="row">
    <div class="col bg-light rounded p-2">
        <EditForm Model="_registers.Inputs" OnValidSubmit="() => _registers.ApplyInputs()">
            <DataAnnotationsValidator />

            <div class="form-row">
                <div class="btn-group mb-2 d-flex w-100">
                    <button class="btn btn-outline-info" @onclick="() => _registers.Reset()">
                        RESET
                    </button>
                    <button class="btn btn-outline-info" @onclick="() => _registers.Randomize()">
                        RANDOM
                    </button>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">AX</div>
                    </div>
                    <input type="text" class="form-control" value="@_registers.AX_HEX" disabled/>
                    <InputText @bind-Value="_registers.Inputs.AX" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">BX</div>
                    </div>
                    <input type="text" class="form-control" value="@_registers.BX_HEX" disabled />
                    <InputText @bind-Value="_registers.Inputs.BX" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">CX</div>
                    </div>
                    <input type="text" class="form-control" value="@_registers.CX_HEX" disabled />
                    <InputText @bind-Value="_registers.Inputs.CX" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">DX</div>
                    </div>
                    <input type="text" class="form-control" value="@_registers.DX_HEX" disabled />
                    <InputText @bind-Value="_registers.Inputs.DX" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">&nbsp;</div>
                    </div>
                    <input type="text" class="form-control" disabled />
                    <input type="text" class="form-control" disabled />
                </div>
                <div class="input-group">
                    <button class="btn btn-block btn-success" type="submit">
                        Wpisz nowe wartości
                    </button>
                </div>
            </div>
        </EditForm>
        <hr class="my-3" />
        <div class="text-center">
            <h6 class="text-muted">
                KOMUNIKACJA MIĘDZYREJESTROWA
            </h6>
        </div>
        <EditForm Model="_basicRegisterSelector">
            <div class="row">
                <div class="col-lg">
                    <label class="form-label">Źródło:</label>
                    <InputSelect @bind-Value="_basicRegisterSelector.Source" class="custom-select">
                        <option value="@Register.AX">AX</option>
                        <option value="@Register.BX">BX</option>
                        <option value="@Register.CX">CX</option>
                        <option value="@Register.DX">DX</option>
                    </InputSelect>
                </div>
                <div class="col-lg">
                    <label class="form-label">Cel:</label>
                    <InputSelect @bind-Value="_basicRegisterSelector.Destination" class="custom-select">
                        <option value="@Register.AX">AX</option>
                        <option value="@Register.BX">BX</option>
                        <option value="@Register.CX">CX</option>
                        <option value="@Register.DX">DX</option>
                    </InputSelect>
                </div>
            </div>
            <div class="btn-group mt-2 d-flex w-100">
                <button class="btn btn-outline-info" @onclick="_basicRegisterOperator.MOV">
                    MOV
                </button>
                <button class="btn btn-outline-info" @onclick="_basicRegisterOperator.XCHG">
                    XCHG
                </button>
            </div>
        </EditForm>
        <hr class="my-3" />
        <div class="text-center">
            <h6 class="text-muted">
                STOS
            </h6>
        </div>
        <div class="row">
            <div class="col">
                <EditForm Model="_stackModel">
                    <InputSelect @bind-Value="_stackModel.Register" class="custom-select">
                        <option value="@Register.AX">AX</option>
                        <option value="@Register.BX">BX</option>
                        <option value="@Register.CX">CX</option>
                        <option value="@Register.DX">DX</option>
                    </InputSelect>
                </EditForm>
            </div>
            <div class="col">
                <button class="btn btn-outline-primary btn-block" @onclick="_stackModel.Push">
                    PUSH
                </button>
            </div>
            <div class="col">
                <button class="btn btn-outline-primary btn-block" @onclick="_stackModel.Pop">
                    POP
                </button>
            </div>
        </div>
    </div>
    <div class="col bg-light rounded p-2">
        <EditForm Model="_otherRegisters.Inputs" OnValidSubmit="() => _otherRegisters.ApplyInputs()">
            <DataAnnotationsValidator />

            <div class="form-row">
                <div class="btn-group mb-2 d-flex w-100">
                    <button class="btn btn-outline-info" @onclick="() => _otherRegisters.Reset()">
                        RESET
                    </button>
                    <button class="btn btn-outline-info" @onclick="() => _otherRegisters.Randomize()">
                        RANDOM
                    </button>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">SI</div>
                    </div>
                    <input type="text" class="form-control" value="@_otherRegisters.SI_HEX" disabled/>
                    <InputText @bind-Value="_otherRegisters.Inputs.SI" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">DI</div>
                    </div>
                    <input type="text" class="form-control" value="@_otherRegisters.DI_HEX" disabled />
                    <InputText @bind-Value="_otherRegisters.Inputs.DI" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">BP</div>
                    </div>
                    <input type="text" class="form-control" value="@_otherRegisters.BP_HEX" disabled />
                    <InputText @bind-Value="_otherRegisters.Inputs.BP" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">SP</div>
                    </div>
                    <input type="text" class="form-control" value="@_otherRegisters.SP_HEX" disabled />
                    <InputText @bind-Value="_otherRegisters.Inputs.SP" class="form-control" />
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">DISP</div>
                    </div>
                    <input type="text" class="form-control" value="@_otherRegisters.DISP_HEX" disabled />
                    <InputText @bind-Value="_otherRegisters.Inputs.DISP" class="form-control" />
                </div>
                <div class="input-group">
                    <button class="btn btn-block btn-success" type="submit">
                        Wpisz nowe wartości
                    </button>
                </div>
            </div>
        </EditForm>
        <hr class="my-3" />
        <div class="text-center">
            <h6 class="text-muted">
                KOMUNIKACJA PAMIĘĆ-REJESTRY
            </h6>
        </div>
        <EditForm Model="_advancedRegisterSelector">
            <div class="row">
                <div class="col-lg">
                    <label class="form-label">Kierunek:</label>
                    <InputSelect @bind-Value="_advancedRegisterSelector.Flow" class="custom-select">
                        <option value="@FlowType.FromRegisterToMemory">z rejestru do pamięci</option>
                        <option value="@FlowType.FromMemoryToRegister">z pamięci do rejestru</option>
                    </InputSelect>
                </div>
                <div class="col-lg">
                    <label class="form-label">Typ adresowania:</label>
                    <InputSelect @bind-Value="_advancedRegisterSelector.AddressType" class="custom-select">
                        <option value="@AddressType.Index">Indeksowe</option>
                        <option value="@AddressType.Base">Bazowe</option>
                        <option value="@AddressType.IndexBase">Indeksowo-Bazowe</option>
                    </InputSelect>
                </div>
            </div>
            <div class="p-2 my-3 border rounded border-info">
                <div class="row">
                    <div class="col">
                        <InputSelect @bind-Value="_advancedRegisterSelector.Register" class="custom-select">
                            <option value="@Register.AX">AX</option>
                            <option value="@Register.BX">BX</option>
                            <option value="@Register.CX">CX</option>
                            <option value="@Register.DX">DX</option>
                        </InputSelect>
                    </div>
                    @if(_advancedRegisterSelector.AddressType.HasFlag(AddressType.Index))
                    {
                        <div class="col">
                            <InputRadioGroup @bind-Value="_advancedRegisterSelector.IndexMode">
                                <InputRadio Value="@IndexMode.SI" />
                                <text>&nbsp;</text>SI<br>
                                <InputRadio Value="@IndexMode.DI" />
                                <text>&nbsp;</text>DI<br>
                            </InputRadioGroup>
                        </div>
                    }
                    @if(_advancedRegisterSelector.AddressType.HasFlag(AddressType.Base))
                    {
                        <div class="col">
                            <InputRadioGroup @bind-Value="_advancedRegisterSelector.BaseMode">
                                <InputRadio Value="@BaseMode.BX" />
                                <text>&nbsp;</text>BX<br>
                                <InputRadio Value="@BaseMode.BP" />
                                <text>&nbsp;</text>BP<br>
                            </InputRadioGroup>
                        </div>
                    }
                </div>
            </div>
            <div class="btn-group mt-2 d-flex w-100">
                <button class="btn btn-outline-info" @onclick="_advancedRegisterOperator.MOV">
                    MOV
                </button>
                <button class="btn btn-outline-info" @onclick="_advancedRegisterOperator.XCHG">
                    XCHG
                </button>
            </div>
        </EditForm>
    </div>
</div>
<hr class="my-3" />
<div class="row">
    <div class="col">
        <span>Zawartość stosu:</span>
        <div class="m-2 p-2 border border-warning rounded">
            @for (int i = 0; i < _stack.Length; i++)
            {
                if(_stack[i] != 0)
                {
                    <span>[@(Convert.ToString(i, 16).PadLeft(4, '0'))] @Convert.ToString(_stack[i], 16).PadLeft(4, '0')</span>
                    <br/>
                }
            }
        </div>
    </div>
    <div class="col">
        <span>Zawartość pamięci:</span>
        <div class="m-2 p-2 border border-warning rounded">
            @for (int i = 0; i < _memory.Length; i++)
            {
                if(_memory[i] != 0)
                {
                    <span>[@(Convert.ToString(i, 16).PadLeft(4, '0'))] @Convert.ToString(_memory[i], 16).PadLeft(4, '0')</span>
                    <br/>
                }
            }
        </div>
    </div>
</div>

@code
{
    MainRegisters _registers = new MainRegisters();
    OtherRegisters _otherRegisters = new OtherRegisters();

    BasicRegisterSelector _basicRegisterSelector = new BasicRegisterSelector();
    AdvancedRegisterSelector _advancedRegisterSelector = new AdvancedRegisterSelector();

    BasicRegisterOperator _basicRegisterOperator;
    AdvancedRegisterOperator _advancedRegisterOperator;

    StackModel _stackModel;
    int[] _memory;
    int[] _stack;

    protected override void OnInitialized()
    {
        _memory = new int[64 * 1024];
        _stack = new int[64 * 1024];

        _basicRegisterOperator = new BasicRegisterOperator(
            _registers, _basicRegisterSelector);
        _advancedRegisterOperator = new AdvancedRegisterOperator(
            _registers, _otherRegisters, _advancedRegisterSelector, _memory);
        _stackModel = new StackModel(
            _registers, _otherRegisters, _stack);
    }
}